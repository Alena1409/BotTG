require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, InputFile} = require('grammy');

const bot = new Bot (process.env.KEY);

//–°–û–ó–î–ê–õ–ò –ú–ï–ù–Æ –° –ö–û–ú–ê–ù–î–ê–ú–ò –í –ë–û–¢–ï

bot.api.setMyCommands([
    {command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
    {command: 'contacts', description: '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã'},
    {command: 'share', description: '–ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã'},
    {command: 'menu', description: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'},
]);
//

bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard().text("–°–î–≠–ö").text("WB").text("OZON").row().text("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏").row().text("–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É").row().text("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è").resized();

    await ctx.replyWithPhoto(new InputFile('logo.png'));
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç BRING, –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:',{
        reply_markup: startKeyboard
    });
});

bot.command('share', async (ctx) => {
    const shareKeyboard = new Keyboard().requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è').row().requestContact('–ö–æ–Ω—Ç–∞–∫—Ç').row().requestPoll('–û–ø—Ä–æ—Å').row().placeholder('–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...').resized();

    await ctx.reply('–ö–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏?',{
        reply_markup: shareKeyboard
    })
})

bot.on(':contact', async (crx) => {
    await crx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç')
})

bot.command('contacts', async (ctx) => {
    await ctx.react('üëå')
    await ctx.reply('–ù–∞—à <a href="https://kon-express.ru/">—Å–∞–π—Ç</a>\n–ù–∞—à <a href="https://www.instagram.com/bring__courier/">Instagram</a>\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: @bring_g',
        {parse_mode: 'HTML', disable_web_page_preview: true}
    );
});

bot.command('menu', async (ctx) => {
    const menuKeyboard = new InlineKeyboard().text('1', 'btn1').text('2', 'btn2').text('3', 'btn3');

    await ctx.reply('push', {
        reply_markup: menuKeyboard
    });
});

bot.callbackQuery(['btn1', 'btn2', 'btn3'], async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply('good');
})

///////////////////
//–†–ï–ê–ö–¶–ò–Ø –ù–ê –ö–û–ù–ö–†–ï–¢–ù–û–ï –°–õ–û–í–û

bot.hears('–°–î–≠–ö', async (ctx) => {
    await ctx.reply('–î–∞—é –∏–Ω—Ñ–æ –ø–æ –°–≠–ö')
})
bot.hears('WB', async (ctx) => {
    await ctx.reply('–î–∞—é –∏–Ω—Ñ–æ –ø–æ WB')
})
bot.hears('OZON', async (ctx) => {
    await ctx.reply('–î–∞—é –∏–Ω—Ñ–æ –ø–æ OZON')
})
bot.hears('–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏', async (ctx) => {
    await ctx.reply('–î–∞—é –∏–Ω—Ñ–æ –æ –∫–æ–º–ø–∞–Ω–∏–∏')
})
bot.hears('–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É', async (ctx) => {
    await ctx.reply('–ù–∞–ø–∏—à–∏ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @bring_g')
})
bot.hears('–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', async (ctx) => {
    await ctx.reply('–ü–∏—à–∏')
})



///////////////////
//–†–ï–ê–ö–¶–ò–Ø –ù–ê –õ–Æ–ë–û–ô –¢–ï–ö–°–¢ –°–õ–û–í–û

bot.on('message:text', async (ctx) => {
    await ctx.reply('/start');
});

///////////////////
//–û–ë–†–û–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö
///////////////////

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact Telegram:', e);
    } else {
        console.error('Unknown error:', e);
    }
})
///////////////////

bot.start();